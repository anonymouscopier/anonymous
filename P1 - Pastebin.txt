def A_star(start_node, stop_node):
    open_set = set(start_node)
    closed_set = set()
    g = {}
    parents = {}
    
    #distance of starting node from itself is zero
    g[start_node] = 0
    #start_node is root node
    #so start_nose is set to its own parent node
    parents[start_node] = start_node
    
    while len(open_set) > 0:
        n = None
        
        #node with lowest f() is found
        for v in open_set:
            if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v
                            
        if n == stop_node or Graph_nodes[n] == None:
            pass
        else:
            for(m, weight) in get_neighbors(n):
                #nodes 'm' not in first and last set are added to first
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    #n is set its parent
                    parents[m] = n
                    g[m] = g[n] + weight
                    
                #for each node m, compare its distance from start g(m) to the 
                #from start through n node
                
                else:
                    if g[m] > g[n] + weight: 
                        g[m] = g[n] + weight
                        #change parent of m to n
                        parents[m] = n
                        
                        #if m in closed set, remove and add to open
                        if m in closed_set:
                            closed_set.remove(m)
                            open_set.add(m)
        if n==None:
            print('Path does not Exist')
            return None
        
        #if the current node is the stop_node
        #then we begin reconstructing the path from it to the start_node
        
        if n == stop_node:
            path = []
            
            while parents[n] != n:
                path.append(n)
                n = parents[n]
                
            path.append(start_node)
            
            path.reverse()
            
            print('Optimal Path')
            return path
        
        #remove n from the open_list, and add it to the closed_list
        #because all of his neighbors were inspected
        
        open_set.remove(n)
        closed_set.add(n)
        
    print('Path does not exist')
    return None

#define function to return neighbor and its distance from the passed node

def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None
    
    #for simplicity we will consider heuristic distances given and
    #this function returns heuristic distance for all nodes
    
def heuristic(n):
    H_dist = {
        'S': 8,
        'A': 8,
        'B': 4,
        'C': 3,
        'D': 1000,
        'E': 1000,
        'G': 0,
    }
    return H_dist[n]

#Describe your Graph here
Graph_nodes = {'S': [['A', 1], ['B', 5], ['C', 8]],
               'A': [['D', 3], ['E', 7], ['G', 9]],
               'B': [['G', 4]],
               'C': [['G', 5]],
               'D': None,
               'E': None
              }

A_star('S', 'G')