{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "851c0ca7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33 correct of  350\n",
      "Accuracy:  0.09428571428571429\n",
      "15 correct of  150\n",
      "Accuracy:  0.1\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "mush = pd.read_csv(\"mushrooms.csv\")\n",
    "mush = mush.replace('?', np.nan)\n",
    "mush.dropna(axis=1, inplace=True)\n",
    "\n",
    "target = 'class'\n",
    "features = mush.columns[mush.columns !=target]\n",
    "target_classes = mush[target].unique()\n",
    "test = mush.sample(frac = .3)\n",
    "mush = mush.drop(test.index)\n",
    "cond_probs = {}\n",
    "target_class_prob = {}\n",
    "\n",
    "for t in target_classes:\n",
    "    mush_t = mush[mush[target] == t][features]\n",
    "    target_class_prob[t] = float(len(mush_t)/len(mush))\n",
    "    class_prob = {}\n",
    "    \n",
    "    for col in mush_t.columns:\n",
    "        col_prob = {}\n",
    "        for val, cnt in mush_t[col].value_counts().iteritems():\n",
    "            pr = cnt/len(mush_t)\n",
    "            col_prob[val] = pr\n",
    "        class_prob[col] = col_prob\n",
    "    cond_probs[t] = class_prob\n",
    "    \n",
    "def calc_probs(x):\n",
    "    probs = {}\n",
    "    for t in target_classes:\n",
    "        p = target_class_prob[t]\n",
    "        for col, val in x.iteritems():\n",
    "            try:\n",
    "                p *= cond_probs[t][col][val]\n",
    "            except:\n",
    "                p = 0\n",
    "            probs[t] = p\n",
    "        return probs\n",
    "    \n",
    "def classify(x):\n",
    "    probs = calc_probs(x)\n",
    "    max = 0\n",
    "    max_class = ''\n",
    "    for cl, pr in probs.items():\n",
    "        if pr > max:\n",
    "            max = pr\n",
    "            max_class = cl\n",
    "    return max_class\n",
    "\n",
    "b=[]\n",
    "for i in mush.index:\n",
    "    b.append(classify(mush.loc[i, features]) == mush.loc[i, target])\n",
    "print(sum(b), \"correct of \", len(mush))\n",
    "print(\"Accuracy: \", sum(b)/len(mush))\n",
    "\n",
    "#Test Data\n",
    "b=[]\n",
    "for i in test.index:\n",
    "    b.append(classify(test.loc[i, features]) == test.loc[i, target])\n",
    "print(sum(b), \"correct of \", len(test))\n",
    "print(\"Accuracy: \", sum(b)/len(test))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c035c28",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8205b79e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28694346",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
